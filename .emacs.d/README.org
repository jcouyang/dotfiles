#+OPTIONS: H:2
#+TITLE: Literal Programming Emacs Configure
#+AUTHOR: Jichao Ouyang

* UI

** COMMENT Theme
[[https://draculatheme.com/][dracula]] dark theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :config
    (load-theme 'dracula t))
#+END_SRC

#+RESULTS:
: t

** Fonts
Download [[https://www.jetbrains.com/lp/mono/][JetBrain Mono]] font.
#+BEGIN_SRC emacs-lisp
  (if (member "JetBrains Mono" (font-family-list))
      (set-frame-font "JetBrains Mono ExtraLight 12"))

  (when (eq system-type 'gnu/linux)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font) charset
                        (font-spec :family "Noto Sans CJK SC"))))

  (global-prettify-symbols-mode 1)
#+END_SRC

#+RESULTS:
: t

* Default Settings
  #+BEGIN_SRC emacs-lisp
    ;; Setting
    (server-start)
    (keyboard-translate ?\C-h ?\C-?)
    (column-number-mode 1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (delete-selection-mode 1)
    (global-auto-revert-mode 1)
    (electric-indent-mode t)

    (setq-default
     make-backup-files nil
     indent-tabs-mode nil)
    ;; make unix lineendings default
     (setq default-buffer-file-coding-system 'utf-8-unix)
    (when (eq system-type 'darwin)
      (setq mac-option-modifier 'alt)
      (setq mac-option-modifier 'super) ; make opt key do Super
      (setq mac-command-modifier 'meta))
  #+END_SRC

  #+RESULTS:

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" "/usr/local/bin:/usr/bin:/sbin:/bin")
  (if (eq system-type 'gnu/linux)
      (let ((path-from-shell (shell-command-to-string "/usr/bin/fish -c \"echo -n \\$PATH[1]; for val in \\$PATH[2..-1];echo -n \\\":\\$val\\\";end\"")))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell ":")))
    (let ((path-from-shell (shell-command-to-string "/usr/local/bin/fish -c \"echo -n \\$PATH[1]; for val in \\$PATH[2..-1];echo -n \\\":\\$val\\\";end\"")))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell ":")))
    )
#+END_SRC
  #+RESULTS:
  | /home/jcouyang/.nix-profile/bin | /home/jcouyang/.local/share/coursier/bin | /home/jcouyang/.nix-profile/bin | /home/jcouyang/.local/share/coursier/bin | /usr/local/bin | /usr/bin | /sbin | /bin |


* Modes

** [[https://github.com/winterTTr/ace-jump-mode][ace jump mode]]

You can move your cursor to ANY position ( across window and frame ) in emacs by using only 3 times key press.

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:ensure t
:bind
("C-c SPC" . ace-jump-mode)
("C-c u SPC" . ace-jump-mode-pop-mark)
("C-c l SPC" . ace-jump-line-mode))
#+END_SRC

#+RESULTS:
: ace-jump-line-mode

** [[https://github.com/company-mode/company-mode][company]]

text completion framework
 
 #+BEGIN_SRC emacs-lisp
   (use-package company
     :config
      (add-hook 'after-init-hook 'global-company-mode)
      )
 #+END_SRC

 #+RESULTS:
 : t

** Dhall
#+begin_src emacs-lisp
  (use-package dhall-mode
    :ensure t
    :config
    (setq
      ;; uncomment the next line to disable automatic format
      ;; dhall-format-at-save nil

      ;; comment the next line to use unicode syntax
      ;; dhall-format-arguments (\` ("--ascii"))

      ;; header-line is obsoleted by lsp-mode
      dhall-use-header-line nil))

#+end_src
** expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
:bind
("C-8" . er/expand-region)
("C--" . er/contract-region))
#+END_SRC

#+RESULTS:
: er/contract-region

** Flyspell

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    :config
    (dolist (hook '(text-mode-hook))
      (add-hook hook (lambda ()
                       (flyspell-mode 1)
                       (add-to-list 'company-backends 'company-ispell)
                       (message "company-ispell enable")
                       )
                ))
    (dolist (hook '(prog-mode-hook))
      (add-hook hook (lambda ()
                       (flyspell-prog-mode)
                       (setq company-backends (delete 'company-ispell company-backends))
                       (message "company-ispell disable")
                       )))
    )
#+End_SRC

#+RESULTS:
: t

** fish
#+BEGIN_SRC emacs-lisp
(use-package company-fish
:hook (shell-mode-hook . company-mode)
:init (add-to-list 'company-backends 'company-fish)
)
#+END_SRC

#+RESULTS:
| company-mode |

** forge 
#+BEGIN_SRC emacs-lisp
;;(use-package forge
;;:after magit)
#+END_SRC

#+RESULTS:

** Haskell
   #+begin_src emacs-lisp
              (use-package lsp-haskell
                :config
                (setq haskell-stylish-on-save t))   
   #+end_src

   #+RESULTS:
   : t

** helm
#+BEGIN_SRC emacs-lisp

  (use-package helm
    :ensure t
    :bind
    ("M-x" . helm-M-x)
    ("C-x b" . helm-mini)
    ("M-y" . helm-show-kill-ring)
    :bind (:map helm-map
          ("<tab>" . helm-execute-persistent-action) ; rebind tab to run persistent action
          ("C-i" . helm-execute-persistent-action) ; make TAB works in terminal
          ("C-z" . helm-select-action))
    :config
    
    (helm-autoresize-mode 1)
    (setq 
     helm-M-x-fuzzy-match t
     helm-buffers-fuzzy-matching t
     helm-recentf-fuzzy-match t
     helm-ag-fuzzy-match t ;(ref: ag-fuzzy-match)
     helm-locate-fuzzy-match t
     )
    )
(use-package helm-swoop
  :ensure t
  :bind (("M-m" . helm-multi-swoop-projectile)
	 ("M-M" . helm-swoop-back-to-last-point))
  :init
(bind-key "M-m" 'helm-swoop-from-isearch isearch-mode-map))

  (use-package projectile
:ensure t
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (projectile-global-mode)
  (setq projectile-indexing-method 'alien
  projectile-enable-caching t
  projectile-completion-system 'helm))

  (use-package helm-projectile
:ensure t
    :config
    (helm-projectile-on)
    )
#+END_SRC

** ido
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :bind
    :config
    (setq ido-everywhere t
          ido-enable-flex-matching t)
    (ido-mode 1))
#+END_SRC

#+RESULTS:
: ido-find-file

** indent guide
#+begin_src emacs-lisp
(use-package indent-guide
:hook (prog-mode . indent-guide-mode))
#+end_src

#+RESULTS:
| indent-guide-mode | rainbow-delimiters-mode | (lambda nil (flyspell-prog-mode) (setq company-backends (delete 'company-ispell company-backends)) (message company-ispell disable)) |

** COMMENT js2 mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:config
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.sjs$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.es6$" . js2-mode))
(setq js2-allow-rhino-new-expr-initializer nil)
(setq js2-enter-indents-newline t)
(setq js2-global-externs '("module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))
(setq js2-idle-timer-delay 0.1)
(setq js2-indent-on-enter-key nil)
(setq js2-mirror-mode nil)
(setq js2-strict-inconsistent-return-warning nil)
(setq js2-auto-indent-p t)
(setq js2-include-rhino-externs nil)
(setq js2-include-gears-externs nil)
(setq js2-concat-multiline-strings 'eol)
(setq js2-rebind-eol-bol-keys nil)
(setq js2-mode-show-parse-errors t)
(setq js2-mode-show-strict-warnings nil))
#+END_SRC

#+RESULTS:
: t

** key chord
#+BEGIN_SRC emacs-lisp
      (use-package key-chord
        :config
        (key-chord-mode 1)
        (setq key-chord-two-keys-delay 0.03)
        (key-chord-define-global "vr"     'vr/replace)
        (key-chord-define-global "ln"     'display-line-numbers-mode)
        (key-chord-define-global ",."     "<>\C-b")
        (key-chord-define-global " u"     'capitalize-word)
    )
#+END_SRC

#+RESULTS:
: t

** Langtool
Install LanguageTool version 3.0 or later (and java) https://languagetool.org/

extract them into =/usr/local/share/LanguageTool=

#+BEGIN_SRC emacs-lisp
(use-package langtool
:config
(setq langtool-language-tool-jar "/usr/local/share/LanguageTool/languagetool-commandline.jar"
      langtool-disabled-rules '("WHITESPACE_RULE"
                                "EN_UNPAIRED_BRACKETS"
                                "COMMA_PARENTHESIS_WHITESPACE"
                                "EN_QUOTES")
      langtool-default-language "en-US")
)

#+END_SRC

#+RESULTS:
: t

** COMMENT ligature
#+BEGIN_SRC emacs-lisp
  (when (cl-search "27." (emacs-version))
    (use-package ligature
      :init
      (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                           ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                           "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                           "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                           "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                           "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                           "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                           "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                           ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                           "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                           "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                           "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                            "://"))
      (global-ligature-mode t))
    )

#+END_SRC

#+RESULTS:

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:bind
("C-x g" . magit-status))
#+END_SRC

#+RESULTS:
: magit-status

** multi cursor
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
:bind
("C-<" . mc/mark-previous-like-this)
 ("C->" . mc/mark-next-like-this)
 ("C-*" . mc/mark-all-like-this))
#+END_SRC

#+RESULTS:
: mc/mark-all-like-this

** Nya mode
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
:ensure t
:config (nyan-mode t))
#+END_SRC

** on screen

#+BEGIN_SRC emacs-lisp
(use-package on-screen
:ensure t
:config
(on-screen-global-mode 1)
(setq on-screen-highlight-method 'narrow-line))

#+END_SRC

#+RESULTS:
: narrow-line

** org mode
#+BEGIN_SRC emacs-lisp
     (when (cl-search "27." (emacs-version))
       (require 'org-tempo))
     (setq org-startup-folded 'content)
     (setq org-startup-indented nil)
     (setq org-startup-with-inline-images t)
     (setq org-startup-truncated nil)
     (setq org-src-tab-acts-natively t)

     (setq js-indent-level 2)
#+END_SRC

#+RESULTS:
: 2
#+BEGIN_SRC emacs-lisp
(use-package org-crypt
:config 
(org-crypt-use-before-save-magic)
(setq org-crypt-key "A506C38D5CC847D0DF01134ADA8B833B52604E63")
(setq org-tags-exclude-from-inheritance '("crypt"))
)
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/Dropbox/org")))
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
      (setq org-directory "~/Dropbox/org")
      (setq org-default-notes-file "~/Dropbox/org/refile.org")

      ;; I use C-c c to start capture mode
      (global-set-key (kbd "C-c c") 'org-capture)
      (global-set-key (kbd "C-c a") 'org-agenda)

      ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
      (setq org-capture-templates
            (quote (("t" "Todo" entry (file+headline "~/Dropbox/org/refile.org" "Todos")
                     "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                    ("n" "Note" entry (file+headline "~/Dropbox/org/note.org" "Notes")
                     "* %?\n%U\n%a\n" :clock-in t :clock-resume t)
                    ("w" "Work" entry (file+headline "~/Dropbox/org/myob.org" "Work Notes")
                     "* %?\n%U\n" :clock-in t :clock-resume t)
                    )))
    (setq org-refile-use-outline-path t)

    ; Targets complete directly with IDO
    (setq org-outline-path-complete-in-steps nil)
    ; Use IDO for both buffer and file completion and ido-everywhere to t
    (setq org-completion-use-ido t)
    (setq ido-everywhere t)
    (setq ido-max-directory-size 100000)
    (ido-mode (quote both))
    ; Use the current window when visiting files and buffers with ido
    (setq ido-default-file-method 'selected-window)
    (setq ido-default-buffer-method 'selected-window)
    ; Use the current window for indirect buffer display
    (setq org-indirect-buffer-display 'current-window)

#+END_SRC

#+RESULTS:
: current-window

** COMMENT pallet
#+BEGIN_SRC emacs-lisp
(use-package pallet
:config
(pallet-mode t))
#+END_SRC

#+RESULTS:
: t

** prompt
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))
#+END_SRC

#+RESULTS:
   
** PureScript

#+BEGIN_SRC emacs-lisp
(use-package psc-ide
:init
(setq psc-ide-use-npm-bin t)
:config
(add-hook 'purescript-mode-hook
  (lambda ()
    (psc-ide-mode)
    (company-mode)
    (flycheck-mode)
    (turn-on-purescript-indentation)))

)
#+END_SRC

** rainbow delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode | (lambda nil (flyspell-prog-mode) (setq company-backends (delete 'company-ispell company-backends)) (message company-ispell disable)) |

** Restclient
#+BEGIN_SRC emacs-lisp
    (use-package restclient
      :config
      (add-to-list 'company-backends 'company-restclient))
    ;; :config
    ;; ;
                                            ; 
    ;; :hook (company-mode))
#+END_SRC

#+RESULTS:

** Scala Metals
#+BEGIN_SRC emacs-lisp
      ;; Enable scala-mode for highlighting, indentation and motion commands
      (use-package scala-mode
        :mode "\\.s\\(cala\\|bt\\)$"
        )

      ;; Enable sbt mode for executing sbt commands
      (use-package sbt-mode
        :commands sbt-start sbt-command
        :config
        ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
        ;; allows using SPACE when in the minibuffer
        (substitute-key-definition
         'minibuffer-complete-word
         'self-insert-command
         minibuffer-local-completion-map)
         ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
         (setq sbt:program-options '("-Dsbt.supershell=false"))
      )

      (use-package lsp-mode
        ;; Optional - enable lsp-mode automatically in scala files
        :hook  (scala-mode . lsp)
               (lsp-mode . lsp-lens-mode)
               (dhall-mode . lsp)
        :config (setq lsp-prefer-flymake nil))

      ;; Add metals backend for lsp-mode
      (use-package lsp-metals)

      ;; Enable nice rendering of documentation on hover
      (use-package lsp-ui)
#+END_SRC

#+RESULTS:
: t

** [[https://github.com/atomontage/xterm-color][shell-mode]]
#+begin_src emacs-lisp
(setq comint-output-filter-functions
      (remove 'ansi-color-process-output comint-output-filter-functions))

(add-hook 'shell-mode-hook
          (lambda ()
            ;; Disable font-locking in this buffer to improve performance
            (font-lock-mode -1)
            ;; Prevent font-locking from being re-enabled in this buffer
            (make-local-variable 'font-lock-function)
            (setq font-lock-function (lambda (_) nil))
            (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))
(setenv "TERM" "xterm-256color")
#+end_src

#+RESULTS:
: xterm-256color

** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :init
    (require 'smartparens-config)
    :config
     (smartparens-global-mode t)
     (show-smartparens-global-mode t))

#+END_SRC

#+RESULTS:

** textmate
#+BEGIN_SRC emacs-lisp
(use-package textmate
:init
(textmate-mode)
(bind-keys
 :map *textmate-mode-map*
 ("M--" . text-scale-decrease)
 ("M-=" . text-scale-increase)
 ("M-}" . textmate-shift-right)
 ("M-<backspace>" . kill-whole-line)
 ("M-c" . kill-ring-save)
 ("M-{" . textmate-shift-left)
 ("M-/" . comment-line)
 ("M-l" . textmate-select-line)
 ))
#+END_SRC

#+RESULTS:
: textmate-select-line

** COMMENT typescript
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
   (interactive)
   (tide-setup)
   (flycheck-mode +1)
   (setq flycheck-check-syntax-automatically '(save mode-enabled))
   (eldoc-mode +1)
   (tide-hl-identifier-mode +1)
   ;; company is an optional dependency. You have to
   ;; install it separately via package-install
   ;; `M-x package-install [ret] company`
   (company-mode +1))

 ;; aligns annotation to the right hand side
 (setq company-tooltip-align-annotations t)

 ;; formats the buffer before saving


 (add-hook 'typescript-mode-hook #'setup-tide-mode)
 (require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-hook 'web-mode-hook
         (lambda ()
           (when (and (buffer-file-name)
(string-equal "tsx" (file-name-extension buffer-file-name)))
             (setup-tide-mode))))
#+END_SRC

#+RESULTS:
| lambda | nil | (when (and (buffer-file-name) (string-equal tsx (file-name-extension buffer-file-name))) (setup-tide-mode))       |
| lambda | nil | (if (and (buffer-file-name) (string-equal tsx (file-name-extension buffer-file-name))) (progn (setup-tide-mode))) |

** COMMENT undo tree
   #+begin_src emacs-lisp
        (use-package undo-tree
          :init (global-undo-tree-mode))
   #+end_src
** unicode
#+begin_src emacs-lisp
(use-package unicode-fonts
   :config
    (unicode-fonts-setup))
#+end_src

#+RESULTS:
: t

** web-mode
   #+begin_src emacs-lisp :results none
          (use-package web-mode
            :mode "\\.html$'" "\\.jsx$" "\\.tsx$"
            :init 
            (setq web-mode-markup-indent-offset 2)
            (setq web-mode-css-indent-offset 2)
            (setq web-mode-code-indent-offset 2)
            )
   #+end_src

** which key
   #+begin_src emacs-lisp
               (use-package which-key
                 :config
                 (which-key-mode)
                 (setq which-key-use-C-h-commands t)
                 (setq which-key-paging-key "<f5>")
          )
   #+end_src

   #+RESULTS:
   : t

** yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:config
(yas-global-mode 1))

#+END_SRC

#+RESULTS:
